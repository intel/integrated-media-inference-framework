#
# Generates C++ & Python sources from the .proto files
#
# grpc_generate (<SRCS> <HDRS> <DEST> [<ARGN>...])
#
#  LANG - output language (CPP/PYTHON)
#  SRCS - variable to define with autogenerated source files
#  HDRS - variable to define with autogenerated header files
#  DEST - directory where the source files will be created
#  ARGN - .proto files
#
function(GRPC_GENERATE LANG SRCS HDRS DEST)
  if(NOT ARGN)
    message(SEND_ERROR "Error: GRPC_GENERATE() called without any proto files")
    return()
  endif()

  if(GRPC_GENERATE_APPEND_PATH)
    # Create an include path for each file specified
    foreach(FIL ${ARGN})
      get_filename_component(ABS_FIL ${FIL} ABSOLUTE)
      get_filename_component(ABS_PATH ${ABS_FIL} PATH)
      list(FIND _protobuf_include_path ${ABS_PATH} _contains_already)
      if(${_contains_already} EQUAL -1)
          list(APPEND _protobuf_include_path -I ${ABS_PATH})
      endif()
    endforeach()
  else()
    set(_protobuf_include_path -I ${CMAKE_CURRENT_SOURCE_DIR})
  endif()

  if(DEFINED PROTOBUF_IMPORT_DIRS)
    foreach(DIR ${PROTOBUF_IMPORT_DIRS})
      get_filename_component(ABS_PATH ${DIR} ABSOLUTE)
      list(FIND _protobuf_include_path ${ABS_PATH} _contains_already)
      if(${_contains_already} EQUAL -1)
          list(APPEND _protobuf_include_path -I ${ABS_PATH})
      endif()
    endforeach()
  endif()

  set(${SRCS})
  set(${HDRS})
  foreach(FIL ${ARGN})
    get_filename_component(ABS_FIL ${FIL} ABSOLUTE)
    get_filename_component(FIL_WE ${FIL} NAME_WE)
    get_filename_component(FIL_DIR ${FIL} DIRECTORY)

    # Relative path to the proto file directory
    file(RELATIVE_PATH REL_DIR ${CMAKE_CURRENT_SOURCE_DIR} ${FIL_DIR})

    if(${LANG} STREQUAL "CPP")
        list(APPEND ${SRCS} "${REL_DIR}/${FIL_WE}.grpc.pb.cc")
        list(APPEND ${HDRS} "${REL_DIR}/${FIL_WE}.grpc.pb.h")
    elseif(${LANG} STREQUAL "PYTHON")
        list(APPEND ${SRCS} "${REL_DIR}/${FIL_WE}_pb2_grpc.py")
    else()
        message(FATAL_ERROR "Unsupported language: ${LANG}")
    endif()

    # C++
    # message(STATUS "LANG=${LANG} FIL_WE=${FIL_WE}")
    if(${LANG} STREQUAL "CPP")
        add_custom_command(
        OUTPUT "${REL_DIR}/${FIL_WE}.grpc.pb.cc"
                "${REL_DIR}/${FIL_WE}.grpc.pb.h"
        COMMAND LD_LIBRARY_PATH=$<TARGET_FILE_DIR:gRPC::grpc_plugin_support>:$<TARGET_FILE_DIR:protobuf::libprotoc>
            $<TARGET_FILE:protobuf::protoc>
        ARGS --grpc_out ${DEST} ${_protobuf_include_path} --plugin=protoc-gen-grpc=$<TARGET_FILE:gRPC::grpc_cpp_plugin> ${ABS_FIL}
        DEPENDS ${ABS_FIL} protobuf::protoc gRPC::grpc_cpp_plugin
        COMMENT "Running cpp gRPC compiler on ${FIL}"
        VERBATIM)
    # Python
    elseif(${LANG} STREQUAL "PYTHON")
        add_custom_command(
        OUTPUT "${REL_DIR}/${FIL_WE}_pb2_grpc.py"
        COMMAND LD_LIBRARY_PATH=$<TARGET_FILE_DIR:gRPC::grpc_plugin_support>:$<TARGET_FILE_DIR:protobuf::libprotoc>
            $<TARGET_FILE:protobuf::protoc>
        ARGS --grpc_out ${DEST} ${_protobuf_include_path} --plugin=protoc-gen-grpc=$<TARGET_FILE:gRPC::grpc_python_plugin> ${ABS_FIL}
        DEPENDS ${ABS_FIL} protobuf::protoc gRPC::grpc_python_plugin
        COMMENT "Running python gRPC compiler on ${FIL}"
        VERBATIM)
    endif()
  
  endforeach()

  set_source_files_properties(${${SRCS}} ${${HDRS}} PROPERTIES GENERATED TRUE)
  set(${SRCS} ${${SRCS}} PARENT_SCOPE)
  set(${HDRS} ${${HDRS}} PARENT_SCOPE)
endfunction()